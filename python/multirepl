#!/usr/bin/env python3
import argparse
import sys
import re

def parseArguments():
    parser = argparse.ArgumentParser(description='multirepl - Perform regex replacement operations based on grep-output-like input files')
    parser.add_argument('input', help="File/input stream containing list of lines with pattern: <filepath><separator><lineno>[optional rest of line], typically obtained via grep (or structviz tool).", type=argparse.FileType("r"), nargs="?", default=sys.stdin)
    parser.add_argument('searchPattern', type=str, help=r"Pattern (regex) to search for per file lineno.")
    parser.add_argument('replacePattern', type=str, help=r"Pattern (regex) to search for per file lineno.")
    parser.add_argument('--separator', type=str, default=r"\s:", nargs="?", help=r"Characters regarded as separator between filepath and lineno [default='\s:']")
    parser.add_argument('-s,--case-sensitive', dest="ignoreCase", action="store_false", help="Do not ignore case when search for patterns [default=False]")
    parser.add_argument('-i,--in-place', dest="inPlace", action="store_true", help="Apply replacement action directly to original file(s) [default=False]")
    parser.add_argument('-v,--verbose', dest="verbose", action="store_true", help="Verbose output")
    parser.set_defaults(ignoreCase=True,verbose=False,inPlace=False)
    return parser.parse_args()

args = parseArguments()
# parsing
flag = re.IGNORECASE if args.ignoreCase else 0
locatorPattern = re.compile(r"([^{0}]+)[{0}]+([0-9]+)".format(args.separator), flag)

# convert input into convenient format
# we want to open files only once.
locations = {}
for line in args.input.readlines():
    m = locatorPattern.match(line)
    if m:
       filepath = m.group(1)
       lineno   = int(m.group(2))
       if args.verbose:
          print("INFO: found filepath '{0}' and line number '{1}'.".format(filepath,lineno),file=sys.stderr)
       if not filepath in locations:
           locations[filepath] = []
       locations[filepath].append(lineno)
    else:
       print("WARNING: input line '{0}' is not in format '<filepath><separator><lineno>[optional rest of line]'. Is ignored.".format(locator),file=sys.stderr)

# no go through the lines and replace all search patterns by the replacement pattern in the specified lines
for filepath,linenos in locations.items():
    outputlines = []
    with open(filepath,"r") as target:
        for lineno, line in enumerate(target.readlines()):
            if lineno+1 in linenos:
                modLine = re.sub(pattern = r"{0}".format(args.searchPattern),\
                                 repl    = r"{0}".format(args.replacePattern),\
                                 string  = line.strip("\n"),\
                                 count   = 0, flags = re.IGNORECASE) # 0 - replace all matches
                if args.verbose:
                    print("INFO: {0}:{1}: replace '{2}' -> '{3}'".format(filepath,lineno,line.rstrip("\n"),modLine),file=sys.stderr)

                outputlines += ["{0}\n".format(el) for el in modLine.split("\n")]
            else:
                outputlines.append(line)
    if args.inPlace:
        print("INFO: directly apply changes to original file '{0}'".format(filepath),file=sys.stderr)
        with open(filepath,"w") as target:
            target.writelines(outputlines)
    else: 
        print("".join(outputlines))
